import { createSlice } from "@reduxjs/toolkit";
import AsyncStorage from "@react-native-async-storage/async-storage";

// Define the initial state of the cart
const initialState = {
  cartCount: 0,
  items: [], // array to store cart items
  loading: false,
  error: null,
};

// Create the cart slice
export const cartSlice = createSlice({
  name: "cartSlice",
  initialState,
  reducers: {
    // Reducer to add item to cart and increase count
    addToCart: (state, action) => {
      const existingItemIndex = state.items.findIndex(
        (item) => item.id === action.payload.id
      );

      console.log("existingItemIndex: " + existingItemIndex);

      if (existingItemIndex >= 0) {
        // If the item exists, increase the quantity
        state.items[existingItemIndex].quantity += action.payload.quantity;
      } else {
        // If the item does not exist, add it to the cart with a quantity of 1
        state.items.push({
          ...action.payload,
          quantity: action.payload.quantity,
        });
      }

      // Update cartCount based on the new quantity
      countNumberOfCart = 0;
      state.items.map((item) => (countNumberOfCart += 1));
      state.cartCount = countNumberOfCart;
      console.log("cart: " + JSON.stringify(state.items));

      // Save cart items to storage
      AsyncStorage.setItem("cartItems", JSON.stringify(state.items));
    },
    // Reducer to remove item from cart and decrease count
    removeFromCart: (state, action) => {
      state.cartCount -= 1;
      state.items = state.items.filter((item) => item.id !== action.payload.id);
      AsyncStorage.setItem("cartItems", JSON.stringify(state.items)); // Update cart items in storage
    },
    clearCart: (state) => {
      state.items = [];
      state.cartCount = 0;
      AsyncStorage.removeItem("cartItems"); // Clear the stored cart items
    },
    increaseQuantity: (state, action) => {
      state.items = state.items.map((item) =>
        item.id === action.payload
          ? { ...item, quantity: item.quantity + 1 }
          : item
      );

      // Save cart items to storage
      AsyncStorage.setItem("cartItems", JSON.stringify(state.items));
    },
    decreaseQuantity: (state, action) => {
      state.items = state.items
        .map((item) =>
          item.id === action.payload
            ? { ...item, quantity: item.quantity - 1 }
            : item
        )
        .filter((item) => item.quantity > 0); // Filter out items with quantity 0

      // Save cart items to storage
      AsyncStorage.setItem("cartItems", JSON.stringify(state.items));
    },
  },
  extraReducers: (builder) => {
    builder;
    // Future async actions (e.g., fetching cart from server) can be added here
  },
});

// Export the action creators generated by createSlice
export const {
  addToCart,
  removeFromCart,
  clearCart,
  increaseQuantity,
  decreaseQuantity,
} = cartSlice.actions;

// Export the reducer as default
export default cartSlice;
